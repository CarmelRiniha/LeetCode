majority element in an array

import java.util.Scanner;

class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        int maxCount = 0;  // To store the maximum count of any element
        int candidate = nums[0]; // Assume the first element as the candidate

        for (int i = 0; i < n; i++) {
            int count = 0; // Reset count for each new element
            for (int j = 0; j < n; j++) {
                if (nums[i] == nums[j]) {
                    count++;
                }
            }

            // If current element appears more than previous candidate
            if (count > maxCount) {
                maxCount = count;   // Update max frequency
                candidate = nums[i]; // Update candidate
            }
        }

        // Final check: Ensure the candidate is actually a majority element
        if (maxCount > n / 2) {
            return candidate; // Majority element found
        }

        return -1; // No majority element
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int m = scanner.nextInt();
        int[] nums = new int[m];

        for (int i = 0; i < m; i++) {
            nums[i] = scanner.nextInt();
        }

        Solution solution = new Solution();
        System.out.println(solution.majorityElement(nums));

        scanner.close();
    }
}



-----------------------------------------------------------------------

import java.util.Scanner;

class Solution {
    public int majorityElement(int[] nums) {
        int candidate = nums[0];
        int count = 1;

        // Step 1: Find the candidate using Boyer-Moore
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == candidate) {
                count++; // Increase count if same as candidate
            } else {
                count--; // Decrease if different
            }

            // If count reaches 0, choose a new candidate
            if (count == 0) {
                candidate = nums[i];
                count = 1;
            }
        }

        // Step 2: Verify if the candidate is the majority
        count = 0;
        for (int num : nums) {
            if (num == candidate) {
                count++;
            }
        }

        return (count > nums.length / 2) ? candidate : -1;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int m = scanner.nextInt();
        int[] nums = new int[m];

        for (int i = 0; i < m; i++) {
            nums[i] = scanner.nextInt();
        }

        Solution solution = new Solution();
        System.out.println(solution.majorityElement(nums));
        scanner.close();
    }
}
